<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.shop.dao.ProductDao">

    <!-- Result Mapping -->
    <resultMap id="ProductResultMap" type="com.example.shop.model.entity.Product">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="price" property="price"/>
        <result column="quantity" property="quantity"/>
        <result column="visible" property="visible"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
    </resultMap>

    <!-- Base Fields -->
    <sql id="Base_Column_List">
        id, name, price, quantity, visible, created_at, updated_at
    </sql>

    <!-- Where Clause -->
    <sql id="Where_Clause">
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="minPrice != null">
                AND price &gt;= #{minPrice}
            </if>
            <if test="maxPrice != null">
                AND price &lt;= #{maxPrice}
            </if>
            <if test="visible != null">
                AND visible = #{visible}
            </if>
        </where>
    </sql>

    <!-- Query Product List (with pagination) -->
    <select id="selectProducts" resultMap="ProductResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        <include refid="Where_Clause"/>
        ORDER BY created_at DESC
    </select>


    <!-- Query Product by ID -->
    <select id="selectById" resultMap="ProductResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE id = #{id}
    </select>

    <!-- Query Product by Name -->
    <select id="selectByName" resultMap="ProductResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE name = #{name}
        LIMIT 1
    </select>

    <!-- Insert Product -->
    <insert id="insert" parameterType="com.example.shop.model.entity.Product" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO products (name, price, quantity, visible, created_at, updated_at)
        VALUES (#{name}, #{price}, #{quantity}, #{visible}, NOW(), NOW())
    </insert>

    <!-- Update Product -->
    <update id="update" parameterType="com.example.shop.model.entity.Product">
        UPDATE products
        SET name = #{name},
            price = #{price},
            quantity = #{quantity},
            visible = #{visible},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- Delete Product -->
    <delete id="deleteById">
        DELETE FROM products WHERE id = #{id}
    </delete>

    <!-- Update Product Visibility -->
    <update id="updateVisibility">
        UPDATE products
        SET visible = #{visible},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- Query Visible Product List -->
    <select id="selectVisibleProducts" resultMap="ProductResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE visible = true
        ORDER BY created_at DESC
    </select>

    <!-- Batch Query Products by ID List -->
    <select id="selectByIds" resultMap="ProductResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <!-- Batch Update Products -->
    <update id="batchUpdate" parameterType="java.util.List">
        <foreach collection="products" item="product" separator=";">
            UPDATE products
            SET name = #{product.name},
                price = #{product.price},
                quantity = #{product.quantity},
                visible = #{product.visible},
                updated_at = NOW()
            WHERE id = #{product.id}
        </foreach>
    </update>

</mapper> 